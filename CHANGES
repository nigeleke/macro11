
----------- Mike Hill's entries ------------------

04-Apr-2023: Mike Hill
        Detect badly formed .MACROs
        - macros.c
          If -strict we now enable a previously disabled check in defmacro()
        Join the two DIRARGs enabl_arg* & list_arg* into enabl_list_arg*
        - symbols.h
          Removed E_res and replaced E__LAST & L__LAST with ARGS__LAST
          Changed ENABL() and LIST()
          Replaced lookup_enabl_arg() and lookup_list_arg() with lookup_arg()
        - symbols.c
          As symbols.h
          load_dirargs() only needs to update enabl_list_arg[]
          dump_dirargs() now uses flags to determine the arg type
          usage_dirarg*() only needs to scan enabl_list_arg[]
          lookup_arg() replaces lookup_enabl_arg() and lookup_list_arg()
        - listing.h
          Changed #define list_level -to- enabl_list_arg[L_LIS].curval
        - assemble.c
          Use lookup_arg() and enabl_list_arg[] etc.
          Join P_NLIST + P_LIST and P_DSABL + P_ENABL together
        - macro11.c
          Use lookup_arg() and enabl_list_arg[] etc.
        Add the -dc command line option (like -d) to disable changes to directive arguments
        - symbols.h
          Add #define ARGS_IGNORE_THIS
          Add #define ARGS_IGNORE()
        - symbols.c
          Updated dump_dirargs()
        - assemble.c
          Use ARGS_IGNORE()
        - macro11.c
          Added 'flags' to enable_tf()
          Added "-dc" option and updated 'Usage'
        Implement .NLIST CND
        - symbols.c
          Change the flags for L_CND
        - assemble.c
          Suppress the line if !LIST(CND) in P_IF etc.
          For .IIF suppress the line (if FALSE) or reload the listing line (if TRUE)
        Fix .NLIST MD
        - assemble.c
          Suppress the '.MACRO' line at P_MACRO
        Implement .NLIST MC,ME,MEB
        - symbols.c
          Change the flags for MC,ME,MEB
        - assemble.c
          Suppress the listing line for macro calls if .NLIST MC
        - listing.h
          Declare list_within_exp
        - listing.c
          Add #include "macros.h" and #include "rept_irpc.h"
          Define list_within_exp
          list_source() sets list_within_exp if the source line came from a macro/rept/irp/irpc
          list_process() now handles suppressing .NLIST ME,MEB
        Ran test suite with command line options -e ME -d TOC -dc BEX,ME,MEB
          And got the same results as 0.8.3 (from 28-Mar-2023)
            Except ... test-packed ... because of .LIST HEX
        Changed version date of 0.8.4 to 04-Apr-2023
        - macro11.h

03-Apr-2023: Mike Hill
        Change debug level of LSB debug messages to 2
        - assemble.c
        - parse.c
        Implement .SBTTL
        - listing.h
          Declare title_string[32] and toc_shown
        - listing.c
          Initialize title_string[32] and toc_shown
        - macro11.h
          Add #define PROGRAM_NAME "macro11"
        - macro11.c
          Use PROGRAM_NAME instead of "macro11"
          Arrange for a page-throw if the TOC is shown
        - assemble.c
          Add #include <time.h> and #include "macro11.h"
          Move P_TITLE to above P_SBTTL
          P_TITLE: Acquire the title string
          P_SBTTL: Output the TOC heading and .SBTTL
        Further .LIST/.NLIST & .ENABL/.DSABL enhancements
        - symbols.c
          list_symbol_table()
            Make sure that -ysl 64 works with .LIST TTM
          list_section()
            Removed ",NOSAV" if -stringent and -rsx [ TODO: enable it in list_symbol_table() ]
        Add flags field to dirargs and changed show_dirargs() to dump_dirargs()
        - symbols.h
          Add the #define ARGS_* from symbols.c here
        - symbols.c
          Remove the #define ARGS_* here (they are in symbols.h now)
          Changed how the flags are used
        - macro11.c
          Updated dirargs

01-Apr-2023: Mike Hill
        Further .LIST/.NLIST & .ENABL/.DSABL enhancements
        - symbols.c
          Changed flags for SEQ,LOC,BIN,HEX in add_dirargs() 
        - listing.h
          Changed LSTFORMAT (again)
        - listing.c
          Added #include <assert.h> and <ctype.h>
          Changed uses of LSTFORMAT
          Completed .LIST TTM
          Added .NLIST SEQ,LOC,BIN
        Added .LIST HEX
        - listing.c
          New routine - list_oct2hex()
        - symbols.c
          list_symbol_table()
            Added printf formats for octal & hex
            Miss off the trailing space on output lines [ TODO: enable it in list_symbol_table() ]
          list_section()
            Added printf formats for octal & hex
            Removed ",NOSAV" if -stringent and -rsx (currently commented out)

31-Mar-2023: Mike Hill
        Further .LIST/.NLIST & .ENABL/.DSABL enhancements
        - assemble.c
          For -yd: show_dirargs() at the end of pass 2
        - symbols.c
          Changed flags for BEX in add_dirargs()
        - listing.h
          Changed LSTFORMAT
        - listing.c
          Added .[N]LIST BEX

30-Mar-2023: Mike Hill
        Symbol table with < 2 PSECTs which have relocatable symbols no longer shows section numbers
        - symbols.c
          Do not show the section number for the blank section (line MACRO-11)
            Currently disabled to keep the test output consistent [ TODO: enable it in list_symbol_table() ]
        Updated 'usage' for -e and -d
        - symbols.h
          Changed L_lev to L_LIS
          Add usage_dirargs()
        - symbols.c
          Changed L_lev to L_LIS
          load_dirargs() now copies the defval to curval for L_LIS
          Add usage_dirarg() and usage_dirargs()
          Updated ADD_LIST_ARG(BEX & ME)
          Made add_dirarg() static etc.
          show_dirargs() now ignores flags for L_LIS
        - macro11.c
          Move add_dirargs() to before call to print_help()
          Removed old -e and -d options list
          Call usage_dirargs() to show the new options list
          enable_tf(): -e LIS increases list level, -d LIS decreases it all others now keep the flags intact
        - assemble.c
          P_LIST / P_NLIST now need to disable use of 'LIS'
        Remove list_bex and list_me (initialized but never used)
	- listing.h
	- listing.c
	- macro11.c
	- assemble.c
        Change list_level from an int to a reference to list_arg[L_LIS].curval = LIST(LIS)
        - listing.h
          #include "symbols.h"
          Replace extern int list_level with #define
        - listing.c
          Remove int list_level
        Change list_md to LIST(MD)
	- listing.h   (remove list_md)
	- listing.c   (ditto)
	- macro11.c   (ditto)
	- assemble.c  (ditto)
        - macros.c    (replace)
        - rept_irpc.c (replace)
        Change enabl_xxx (xxx=ama,gbl,lc,lcm,lsb,mcl) to ENABL(xxx) and remove opt_enabl_ama
        - assemble_globals.h (remove)
        - assemble_globals.c (remove)
        - assemble.c         (remove & replace)
        - macro11.c          (remove)
        - parse.c            (replace enabl_ama)
        - assemble_aux.c     (replace enabl_gbl)
        Further .LIST/.NLIST & .ENABL/.DSABL enhancements
        - symbols.c
          Add comments and change flags for various add_dirargs()
        - parse.c
          Only round floating-point if .DSABL FPT (default)
        - assemble.c
          P_SBTTL: only show TOC if .LIST TOC
          P_REM: only list .REM contents if .LIST COM (default)
        - listing.c
          Add trunc() to truncate lines
          Add list_process() to process lines before listing them
            .NLIST SEQ,LOC,BIN,SRC suppresses all lines
            .NLIST COM does not list lines starting with ';' or empty lines (unlike MACRO-11)
            .NLIST SRC does not list lines which would only have a sequence number (also unlike MACRO-11)
            The listing line will be truncated -- and suppressed if empty (TODO: .NLIST SEQ LOC BIN)
            Note: all parts of lines with errors will always be listed

29-Mar-2023: Mike Hill
        Changed version to 0.8.4
        - macro11.h
        Added flags to DIR_ARGS defval (currently not exported in symbols.h)
        - symbols.c
          add_dirarg() #define some flags
          add_dirargs() use those flags
          load_dirargs() only copy bit 0 from defval to curval
          show_dirargs() show the flags
        - macro11.c
          Removed commented-out copies of lookup_enabl_arg() and lookup_list_arg()
        Never suppress listing lines on pass 1 for -yl1
        - listing.c

28-Mar-2023: Mike Hill
        Addition of .LIST/.NLIST & .ENABL/.DSABL & -e/-d command line options
        - symbols.c
          Do not display symbol table/psects if .NLIST SYM (-d SYM)
          Implement .LIST TTM for symbol table (only)
        - macro11.c
          #include "parse.h" [we now use skipwhite() etc.]
          Parse the options to -e and -d in enable_tf()
            We now allow -e "AMA TTM" or -d AMA,TTM etc.
        - assemble.c
          Fixed bug when .ENABL/.DSABL parameter was not a valid label (e.g. .ENABL ?).
          Added lookup_enabl_arg() to P_ENABL & P_DSABL
          Moved P_LIST and P_NLIST to before P_ENABL and joined them together
          Added lookup_list_arg() to P_LIST (and P_NLIST)
          Implemented .[N]LIST BEX, MD, and ME (using previous variables)
          List the list_level in the value field for empty .LIST or .NLIST (currently disabled)
          List the suppressedness in the value field for .IFT .IFF .IFTF (currently disabled)
        Changed version to 0.8.3 and date to 28-Mar-2023
        - macro11.h

27-Mar-2023: Mike Hill
        Fixed "dangling else" and case "FALL THROUGH" GCC informationals found by Rhialto
        - assemble.c
          Added {} to 'if' and '/* FALL THROUGH */' comments
        Fixed __VA_ARGS__ with no '...' args in GCC found by Rhialto
        - listing.h
          Changed #define report_* to ##__VA_ARGS__
        Fixed the bug Rhialto found that I introduced with pagination (\f .MACRO X ; followed by a blank line)
        - macros.c
          Now flush the listing buffer BEFORE calling stack_getline()
        - assemble.c
          Suppress the LIST_SUPPRESS_LINE for .END (in case of '\f' before .END)
        Added memcheck() to malloc()
        - assemble_aux.c
        - symbols.c
        Added -ylls command line option (local symbols are no longer listed in the symbol table by default)
        - macro11.c
          Populate symbol_list_locals and update 'usage'
        - symbols.h
          Declare symbol_list_locals
        - symbols.c
          Define symbol_list_locals
          Use symbol_list_locals instead of skip_locals in symbol_table()
          Do not show the DOT symbol unless -ylls
          Only sort and print the "Symbol Table" heading if there are symbols to list
          Changed symbol_table() to check_sym_invariants() for all symbols during first scan of the symbol table
          List the sections outside the symbol-sort block
          Enable use of rad50cmp() to sort the symbol table etc.
        Prepare for .ENABL/.DSABL and .LIST/.NLIST additions
        - symbols.h
          Add struct DIRARG and enums enabl_args & list_args and extern DIRARG for enabl & list
          Add #define ENABL() and LIST() to get a current directive argument value
          Declare add_dirargs() & load_dirargs() & show_dirargs()
        - symbols.c
          Define DIRARG for enabl & list
          Add routines for add_dirargs() & load_dirargs() & show_dirargs()
        - macro11.c
          add_dirargs() before parsing the command line
          load_dirargs() at the start of each pass
          If -yd and/or -yl1 show_dirargs()

21-Mar-2023: Mike Hill
        Fixed error message within macro call showing following lines
        - assemble.c
          Use (..., "...%*s\n", strcspn(cp, "\n"), cp);
        .IF XX now treats undefined symbols as zero (still with an error)
        - assemble.c
          Removed the "Pick something" and replaced it with a new_ex_lit(0)
        We now check for -ysl > 6 that there are no duplicate globals
        - assemble_aux.c
          Added write_psect_globals() to check the globals and output the psects & globals
        - symbols.h
          Declare symbol_compar()
        - symbols.c
          Remove 'static' from symbol_compar()

20-Mar-2023: Mike Hill
        Fixes after trying all tests with -stringent (.mac) and -strict (.m11)
        - parse.c
          case '_': report_warn() only (but return correct result)
          case 'r': changed report_warn() message
          case 'p': report_warn() only (but return correct result)
        - assemble.c
          eval_ifdf_ifndf(): report_warn() if missing symbol only if -strict*2 (m11 treats '.IF DF' w/o arg as FALSE)
          P_END: now removes LIST_PAGE_BEFORE flag from list_line_act
          P_IF: now always lists the result of the .IF (extension to MACRO-11, but I like it)
          P_IIF: now never lists the result (because the TRUE part might want to put a value there)
          OC_1GEN: and OC_JSR: now always show the message for "JMP/JSR/TSTSET/WRTLCK Rn is impossible"
        - symbols.c
          dump_sym(): Replaced report_err() with report_warn() -- just to be ready

17-Mar-2023: Mike Hill
        Changed .INCLUDE to NOT try to include the file if there is a syntax error on the line (like V05.05)
        - assemble.c
          CHECK_EOL before trying to open the include file
        - util.c
          Added a memcheck() to defext()
        Allow whitespace after '@' and '-' etc. -- E.g. 'TST @ - ( R0 )'
        - parse.c
        Avoid phase errors & improve handling of complex register refs. [ e.g. A = %B // TST A // B=5. // L1: // .END ]
          The down-side is that illegal register assignments will list the wrong value (e.g. A=%8. will list 177700)
          The same applies to instructions referencing illegal registers (e.g. MOV %8.,-(SP) will generate 170046)
        - symbols.h
          Add an extra reg_sym to handle errors (REG_ERR)
        - symbols.c
          add_sym() REG_ERR: "%E" = 0177700 (chosen so binary generated is visibly wrong)
        - assemble_aux.c
          get_register() now returns NO_REG if SECTION_REGISTER value is invalid (only applies to REG_ERR = reg_sym[8])
        - extree.c
          evaluate() returns REG_ERR if the EVALUATE_OUT_IS_REGISTER is out-of-range
        - parse.c
          get_mode() does not return FALSE for NO_REG errors but DOES return error message
        - assemble.c
          New routine get_mode_check() as a wrapper to get_mode()
          Replaced all calls to get_mode() with get_mode_check()
          Put a local wrapper around call to get_fp_src_mode()

16-Mar-2023: Mike Hill
        Further updates for page throwing
        - assemble.c
          .PAGE XXX now throws the error after throwing the page
        - listing.h
          Add list_page_fmt
          Add list_throw_page()
        - listing.c
          Add list_page_fmt = "\n\n"
          Add list_throw_page()
        - stream2.c
          Throw a page between files (command-line or .INCLUDE)
        
15-Mar-2023: Mike Hill
        Updated report_xxx() for future expansion (see 06-Mar)
        - listing.h
          Added #define REPORT_xxx
          Changed #define report_xxx to use __VA_ARGS__
        Make sure that EVALUATE_OUT_IS_REGISTER for a bad register returns a non-EX_LIT EX_ERR
          We do this to get the same result as tests/test-reg.mac (but any result is "wrong")
        - extree.c
        Sort symbol table in RADIX50 order (make ready)
        - symbols.c
          Added two routines: rad50order() and rad50cmp()
          Added a #define rad50cmp to [currently] disable this
          Fixed initialization of 'longest_symbol' in list_symbol_table()
          Removed the ":" from "Program sections" to match "Symbol table"
        Implement page throws (2 x \n) before .PAGE [not suppressed if ';'] (also for '\f') and after .INCLUDE
          Note: Blank lines (truly blank: 'whitespace != blank') after a [suppressed] page-throw are suppressed
        - listing.h
          Added int list_page_top, list_line_act with #define LIST_*
        - listing.c
          Added int list_page_top, list_line_act
          list_flush() now uses LIST_* to throw pages
          report() now throws a page before the error message if the line asked for a page-throw 'BEFORE'
        - macro11.c
          Initialize list_page_top & list_line_act in prepare_pass()
        - assemble.c
          P_PAGE: throw page and suppress '.PAGE' if no comment on line (unlike MACRO-11, we don't auppress if ';')
          P_INCLUDE: throw page after showing .INCLUDE
        - stream2.c
          Handle '\f' with both BEFORE and AFTER (and suppress lines which ONLY have '\f' -- like .PAGE)

14-Mar-2023: Mike Hill
        Further changes
        - assemble.c
          Silently [unless -stringent] truncate .CSECT & .PSECT names to max 6 characters (-ysl > 6)
        - parse.c
          Allow whitespace between '^' and 'p' etc. (if not -stringent)
          Finish cleaning up the ^P code

13-Mar-2023: Mike Hill
        More changes to parsing and error handling
        - assemble.c
          If not -strict*2 treat .END as only .ENDing the current stack level
            This allows the .m11 .INCLUDE files (which contain .END) to assemble
          Handle .ENDR as a synonym to .ENDM but with a -stringent warning if it has a parameter
          Changed "unknown flag ... given to .PSECT directive" message (P_CSECT/P_PSECT)
            ... and treat it as a warning (continue parsing)
          Disallow '.' as a .CSECT or .PSECT name [ but commented out - it IS allowed on RSX ]
          Changed error message '.END within .IF' to be clearer
        Undid the change from 02-Mar to set pseudo symbols flags = SYMBOLFLAG_GLOBAL (there is ALWAYS a better way)
        - symbols.c
          Restored ADD_SYM_PSEUDO to (SYMBOLFLAG_PERMANENT | SYMBOLFLAG_DEFINITION)
        - assemble.c
          For -strict we now check for this in eval_ifdf_ifndf() else we allow '.IF DF .ASCII' etc.

11-Mar-2023: Mike Hill
        Changed version to 0.8.2
        - macro11.h
        Fixes to stuff found by Rhialto:-
        - macro11.c
          Fixed order of printf() parameters
        - assemble.c
          Fixed .ASCII and .ASCIZ error message for ';' as a quote
            Also for .IDENT .INCLUDE .LIBRARY .RAD50 (unless -stringent) and .REM
          Added a TODO for P_REM: to make 'top_here' into a routine in stream2
        - parse.c
          Fixed ^PX looping 
            Also fixed ^P<EOL> etc. (started rewriting the case 'p': part) - but need to clean it up

09-Mar-2023: Mike Hill
        Added syntax checking for .CROSS & .NOCROSS and create GX symbols if undefined (as V05.05)
        - symbols.h
          Added #define SYMBOLFLAG_NONE 0 (for readability)
          Added dump_sym() because I needed to test the changes
        - symbols.c
          Made dump_sym() non-static
          Added the missing "%s" to dump_sym() for " IMPLICIT_GLOBAL"
        - assemble.c
          Joined P_CROSS & P_NOCROSS to P_GLOBAL
          Added a 'switch' to set up the symtab and flags for each directive
          add_sym() to the relevant table with the relevant flags
        Added and/or fixed a few comments (TODOs)
        - rad50.c
        - rad50.h
        - macro11.c
        - macro11.h (put today's date in VERSIONSTR)

07-Mar-2023: Mike Hill
        Allow EMT and TRAP to have -ve argument
        - assemble.c
        Move SPL from OC_1REG to OC_MARK (to improve error handling & messages)
        - symbols.c
        - assemble.c
        Fix <x _ a> when x is external and < 0 also a is < 0
        - extree.c
          Make EX_LSH use three operations (EX_AND & EX_DIV & EX_AND) if right < 0

06-Mar-2023: Mike Hill
        Prepare for the addition of report_err(), report_warn(), and report_fatal()
        - listing.h
          Add #define for them - TODO: we create instances!
        Put in report_warn() where the result would be the same if no warning were issued & also report_err() where not
        - assemble.c (and fixed wrong return value in P_PACKED:)
        - assemble_aux.c
        - extree.c
        - macro11.c
        - macros.c
        - parse.c
        - rept_irpc.c
        - symbols.c
        If not -strict, allow alpha-numerics as quotes to .INCLUDE & .LIBRARY
        - parse.c
        Improve EX_DIV and EX_MUL optimization and fix (best-effort) EX_LSH (see above)
        - extree.c
        Fix .FLT2 .FLT4 .LIMIT on odd boundary
        - assemble.c
          Added a new section which forces all directives 'which require it' to an even boundary
          Clean up related tests which have become unnecessary

05-Mar-2023: Mike Hill
        Allow '_' as a valid rad50 character (only if -yus)
          Note that the resulting object file may not be compatible with RSX/RT-11 if global symbols or psects contain '_'
        - rad50.h
          Add a routine rad50_enable_underscore() to switch this feature on
        - rad50.c
          Renamed radtbl[] to rad50tbl[] and added rad50charset[] & rad50charset_ul[]
          unrad50() always translates using '_' and returns "???" if invalid
            Recompile dumpobj to make use of this and display GLOBAL symbols & PSECTs with '_' correctly
        - macro11.c
          Call rad50_enable_underscore() if -yus
        .BYTE should report values outside the range -400:377
          Also applies to .ASCII & .ASCIZ <...> format
        - assemble_aux.c
          Added a check to store_word()
        Added the symbol value to the listing for .NCHR [always] and .NTYPE [only visible if .LIST ME]
        - assemble.c
          Changed P_NCHR: & P_NTYPE:  

04-Mar-2023: Mike Hill
        Disallow '.' used in the wrong context
        - macros.c
          defmacro() now rejects '.' as a macro name
        - assemble.c
          Reject '.' as LHS of ':' (at reassemble:)
          Do not allow '.' as a .GLOBL or .WEAK argument
        Parse .INCLUDE and .LIBRARY correctly
        - assemble.c
          P_LIBRARY now catches getstr_fn() == NULL
        - parse.c
          getstr_fn() returns NULL if final quote does not match initial quote (-strict)
          ditto for empty filename (e.g. .INCLUDE //)

03-Mar-2023: Mike Hill
        assert() some (just 'pass' at the moment) of the variables we use are really correct (and won't cause trouble later)
        - macro11.c
          Added assert() to prepare_pass()

02-Mar-2023: Mike Hill
        Fix .IF DF .directive is TRUE (e.g. .IIF DF .WORD .ERROR ; We know '.WORD')
        - symbols.c
          Set pseudo symbols flags = SYMBOLFLAG_GLOBAL
        Clean up the symbol table creation (making the code easier to read)
        - symbols.h
          Sorted and aligned the pseudo_ops and instruction_ops
          Put the comments on the same line as the operand_codes
        - symbols.c
          Replace ADD_SYM() with 3 new #defines for ADD_SYM_REGISTER, ADD_SYM_PSEUDO, and ADD_SYM_INST
          Sort and align them all within their categories (pseudo sorted by value-text!)
          
28-Feb-2023: Mike Hill
        Added STRINGENT to check the code against the documentation not the V05.05 assembler
        - assemble_globals.h
          Added #define STRINGENT and STRINGENTNESS
        - macro11.c
          Added -stringent and changed usage etc.
        Added pseudo-symbols for directives with > 6 characters if -ysl > 6 and not -stringent
        - symbols.c
        Added the same error as JMP Rn to TSTSET and WRTLCK
        - assemble.c

27-Feb-2023: Mike Hill
        Fix A / B where A[15] or B[15] = 0x8000
        - extree.c
          EX_DIV: Made '/' signed
          EX_LSH: Optimized A _ B if A == 0 and comment that '_' always does a signed shift (see above)
        Pre-process each directive before parsing the arguments
          This catches stuff like ;;;;; // .ASCII writing "random" bytes to the object file without error
        - assemble.c
          Added a large switch block at the beginning of 'case SECTION_PSEUDO:'
          Removed individual checks from many of the other cases

25-Feb-2023: Mike Hill
        Handle EX_DIV by 0 (e.g. A = 1/0)
        - extree.c
          Unless RELAXED we throw an error else result = 0
        Allow certain complex expressions of EX_ERR type to be stored and assigned to symbols
        - assemble_aux.c
          Added additional code to do_word()
        - assemble.c
          Added additional code to symbol assignment ('=') at reassemble:
        - parse.c
          Remove ^PL / ^PH code to generate a new_ex_lit(0) on pass 1 ...
            ... because we now handle this correctly
        Do not store values > 16 bits (e.g. A=200000 // B=A/2 sets B->100000 not 0)
        - extree.c
          new_ex_lit() now stores only 16-bits
        - symbols.c
          Added a check in check_sym_invariants()

24-Feb-2023: Mike Hill
        Allow .END to continue parsing for -relaxed*2
        - assemble_globals.h
          Added #define VERY_RELAXED
        - assemble.c
          if (VERY_RELAXED) just continue parsing the source file(s)

23-Feb-2023: Mike Hill
        Check for correct format of .ENDR and .ENDM (if -strict)
        - macros.c
        Fixed (or commented) all the 'FIXME's
        - assemble.c
        Added .IFZ, etc. (PAL-11R defines .IFEQ .IFZ etc. as backwards compat.)
	- symbols.h
          Renamed P_IFDF to P_IFXX
        - assemble.c
          Renamed P_IFDF to P_IFXX
        - symbols.c
          Renamed P_IFDF to P_IFXX
          add_sym() for .IFZ .IFEQ .IFNZ .IFNE .IFL .IFLT .IFG .IFGT .IFLE .IFGE
        Disallow ^PLpsect and ^PHpsect if -strict*3
        - parse.c
        Generate errors for constants out-of-range
        - parse.c
          Catch ' at EOL (MACRO-11 'A' error)
          Catch " at EOL or 1 character before EOL (MACRO-11 'A' error)
          Catch constant value > 0177777 (if -strict*3) (MACRO-11 'T' error)

22-Feb-2023: Mike Hill
        Disallow '_' (Logical SHift) if -strict*3
        - parse.c
        Report .END within .IF (unless -relaxed)
        - assemble.c
        Report .END within .MACRO & .REPT / .IRP / .IRPC (if -strict)
        - macros.c
        Better handling of unclosed .MACRO & .REPT / .IRP / .IRPC
        - macros.c
          read_body() remembers stack->top of the directive and ...
          ... writes out an error on pass 1 if no .ENDM / .ENDR found
        - rept_irpc.c
          Pass ".REPT" / ".IRP" / ".IRPC" to read_body()

21-Feb-2023: Mike Hill
        Improve line number handling if \f is in the stream
        - stream2.c
          file_getline() now skips leading FF characters
          We still mess up the line numbers of lines containing \f (as before)
          Similarly, process vertical-tabs (VT or \v) as EOL characters

20-Feb-2023: Mike Hill
        For -yd and not -yl1 ... show the .SBTTL contents during pass 1
          This is an aid to debugging until we get the whole TOC stuff working
        - assemble.c
          Added code to P_SBTTL: to do this
        report() if .END is missing for '-strict -strict -strict' [-strict*3]
        - assemble_globals.h
          Added #define STRICTEST
        - assemble_aux.c
          Handle xfer_address == NULL
        - macro11.c
          Only if !STRICTEST initialize the xfer_address to ex_lit(1) (else NULL)
          If STRICTEST and no .END -> ".END was not supplied"
        Put in a stub to catch a recursive stack_push() ...  E.g. for a macro which calls itself
        - stream2.h
          Add stack_depth & MAX_STACK_DEPTH
        - stream2.c
          Init stream_depth to 0 and update it in stack_push() and stack_pop()
          If we hit MAX_STACK_DEPTH write an error message to stderr
          TODO: Handle this better (perhaps with a fatal() routine)

19-Feb-2023: Mike Hill
        Fixed .RADIX <> 8 at the end of pass 1 causing pass 2 to start with wrong radix
        - macro11.c
          Set radix = 8; in prepare_pass()
        - assemble_globals.c
          Initialize radix to zero instead of 8
        Catch undefined local symbol references (must not be turned into global references)
        - assemble_aux.c
          EX_UNDEFINED_SYM: now also detects local symbols (starting with a digit)
          migrate_implicit() should not migrate local symbols
        - symbols.c
          Force add_sym() to always set SYMBOLFLAG_LOCAL for local symbols (even if not requested)
            And throw a report() message (but you'll only see it on pass 1 if you -yl1 -yd)
          Only dump_sym() in check_sym_invariants() if (enabl_debug)
        - assemble.c
          free(label) for local symbols in P_GLOBL: and also parse the rest of the line
          Also catch more .GLOBL / .WEAK syntax errors
        Catch local symbols out of range (0$ and much-too-large$)
        - assemble_globals.h
          Added BAD_LOCSYM = 999999
        - parse.c
          get_symbol() -> report() error for local symbol out-of-range (without stack->top)
        Retro-fit STRICT to changes made earlier which ought to be behind -strict
        - assemble.c
          report() 'Local symbol may not assigned a value' is now only for -strict
          Replaced all 'STRICT_IF_DF_NDF' with if (STRICT) { ... } = -strict
            Test this with the regression tests - if okay, remove the non-strict code
          Enhanced STRICT_IF_DF_NDF_RECURSES -> if '-strict -strict' we DO NOT allow recursion < ... >
            Test this with the regression tests - if okay, set the #define to 0
          JMP Rn etc. is now not shown if -strict -strict (-strict might be better)
          'Z' type errors are not shown if -relaxed
          -strict: report() if .PSECT flags change (but change them anyway)
          -strict: disallow 'MARK #' (same for EMT / TRAP)
          -relaxed: allow 'MARK' without parameters else report()

16-Feb-2023: Mike Hill
        - assemble.c
          Improve .END handling
          Fix MARK to require a parameter (also after '#' - not strictly supported)

15-Feb-2023: Mike Hill
        Add a check for closing quote to .REM
        - assemble.c
          Also write a message for the original .REM if the closing quote is missing
          And the quote characters must be case-insensitive (regardless of .ENABL LCM)

14-Feb-2023: Mike Hill
        Fix .REM to list "discarded" lines and check for EOL after closing quote
        - assemble.c

13-Feb-2023: Mike Hill
        Retro-fitted changes by Rhialto made on 12-Feb-2023
        - parse.c
          Added (unsigned char) to isdigit() and toupper()
        - rept_irpc.c
          Changed message "Invalid .IRPC syntax (label" -> "... (symbol"
        - symbols.c
          Added comments to MED6X and MED74C (and new ones to STA0, STB0, XFC)

12-Feb-2023: Mike Hill
        Additions to report() on pass 1
        - macro11.c
          Print errcount after the symbol table has been listed (because '-l -' wants it there)
          Added a counter to main() to count the report() errors during pass 1
            This is only printed for -yl1 and/or -yd
        - listing.c
          Added a "*" at the left of the listing line for each report() on that line [pass1] (-yl1 only)
            Maybe do this for pass2 (?) -or- [in future] write out the error-letter(s) like MACRO-11

11-Feb-2023: Mike Hill
        -macro11.h
          Do not #include "git-info.h" #if defined(SKIP_GIT_INFO)
        - dumpobj.c
          Only compile the auto-detect code #if DEFAULT_OBJECTFORMAT_RT11 < 0
          #include "git-info.h" #if !defined(SKIP_GIT_INFO)
          Show the GIT_VERSION and GIT_AUTHOR_DATE if available
          #define VERSION to 11-Feb-2023

10-Feb-2023: Mike Hill
        Add some -yd symbols to the symbol table for use by .MAC regression tests
        - listing.h
          Add global variable 'report_errcnt'
        - symbols.h
          Add ADD_DEBUG_SYM() etc.
        - macro11.c
          Set 'report_errcnt=0' in prepare_pass()
          Show the 'report_errcnt' after showing the 'errcount'
          Add "$M11.D =: <enabl_debug>" symbol (constant: count of -yd options)
          Add "$M11.E =: <error_count>" symbol (increases with each error)
          Add "$M11.S =: <strictness>"  symbol (constant: -strict = 1, -relaxed = -1, else 0)
            Add them as permanent symbols to stop them being unintentionally overwritten
          Send them to the listing
        - listing.c
          Update 'report_errcnt' in report() and update "$M11.E"
          Stop report() printing the error message twice if option "-l -" is used
        Keep the symbol table clean in add_symbols()
        - symbols.c
          Show the section name in check_sym_invariants() for "undefinedness"
          The final ADD_SYM() used flags=0 which is "naughty" (but I don't see the need)

09-Feb-2023: Mike Hill
        Add '-strict' and '-relaxed' command-line options
        - assemble_globals.h
          Add strictness variable (<0 = relaxed, 0 = normal, >0 = strict, >1 = stricter)
        - assemble_globals.c
          Initialize strictness variable to zero
        - macro11.c
          Add help text for -strict & -relaxed (and update some other help text)
          Parse -strict & -relaxed to generate value for 'strictness'
          Added a message to show and list the -yd debug level (if > 0)
          If debugging, print the version information to the lstfile (unless '-l -')
             Only write the 'version' to the list file if -yd is followed by -v on the command line
          Added a 'pass #' -yd debug message at the start of each pass

08-Feb-2023: Mike Hill
        - dumpobj.c
          Fixed gcc warnings (embedded comments; int<unsigned; shadowed 'cp', etc.)
          Removed trailing newline if no errors are reported
        Cleanup (only comments etc.)
        - assemble.c
        - macro11.h
        - macro11.c
        - parse.c
        - symbols.c
        Various fixes
        - macro11.c
          Changed exit() to return /* exit */ in main()
          Do not allow multiple '-l' or '-o' options
          Error message if no source files provided
          We now display an error message for file open errors
        - assemble.c
          Fix .TITLE module-name starting with a digit being seen as invalid
            Also fixes NULL reference in gsd_mod() for invalid/empty .TITLE module-name
          .IF/.IIF now reports an error if the condition is unknown (e.g. .IIF QE 0 ...)
          P_IF: Do not try to free() NULL label (although allowed)
          List value 000010 for .RADIX (without parameter)
          Added a stub to catch invalid .INCLUDE format
            Add to -strict and copy to P_LIBRARY later
        - parse.c
          "Junk at end of line" message for < 20 bytes of junk now suppresses the CR/LF
          Replaced 'switch' with 'if' in getstring_fn() - see comments

07-Feb-2023: Mike Hill
        - assemble.c
          Labels (LABEL:) now always list their location
          .PSECT used to reference NULL if the psect-name or arguments are not valid labels
          .CSECT should only accept an optional name and no flags
          Added a TODO stub to handle incompatible flags (unlike MACRO-11 which silently uses them)
            old_flags are always populated and checked -> and will report an error when -strict[est] is used (later)

04-Feb-2023: Mike Hill
        - dumpobj.c
          Added -h option to show the help text and examples

02-Feb-2023: Mike Hill
        Enhancements (fixes) to dumpobj
        - dumpobj.c
          LDA output will not write data > MAX_LDA_ADDR
          Added command options:
            -align    : aligns GSD fields (easier to read)
            -noalign  : GSD format remains the same as previous versions
            -nosort   : does not sort the GSD entries (preserves OBJ order)
            -of <org> : same as '-o' but does not relocate 'internal' RLDs
            -w <...>  : add patch words to the LDA file
            -x        : provide a new LDA transfer address
          Summary '-s' now shows a list of PSECTs (currently disabled)
          Error message if an LDA file is written with more than one PSECT with data

01-Feb-2023: Mike Hill
        Enhancements (fixes) to dumpobj
        - dumpobj.c
          Now writes the relocated 'Internal' RLD to the LDA output
          Added -o <origin> for LDA output
          Made CSECT + VSECT + 'COMPRTN' + LIBHDR + LIBEND a 'badbin'

31-Jan-2023: Mike Hill
        Changed the blank PSECT name for '-rsx' to ". BLK." (commented out!)
        - macro11.c
        Enhancements to dumpobj
        - dumpobj.c
          Implement auto-detection of object type when -rt11 and -rsx not specified
            #define DEFAULT_OBJECTFORMAT_RT11 -1 /* Enables this option */
          Added '-q' [quiet] and '-qt' [quiet-text] and '-s' [summary] options
          Changed the usage text accordingly and added information about dumpobj
          Count bad format (badfmt) and bad binary errors (badbin)

24-Jan-2023: Mike Hill
        Implement 'Z' errors [JMP/CALLR/JSR/CALL to Rn is not an error with V05.05]
        - assemble.c (OC_1GEN & OC_2GEN and OC_JSR)
           CALLR Rn / CALLR (Rn)+ / JMP (Rn)+
           CALL Rn / JSR Rn,(Rm)+
           MOV[B]/CMP/BIT/BIC/BIS/SUB/XOR Rn,[@]-(Rn) and [@](Rn)+

24-Jan-2023: Mike Hill
        Retrofit all changes made in 0.9wip from GitLab on 17-Aug-2022
        - assemble.c
          Changed report() from 'Illegal' to 'Invalid' etc.
          Parse multiple labels (A: B: ...) using 'while' instead of 'goto'
          New parameter to add_sym(... , *stream);
          Added in P_PACKED: (after moving 'int' and 'char *' to the top of the block)
        - assemble_aux.c
          New parameter to add_sym(... , *stream);
          Changed report() from 'Illegal' to 'Invalid'
        - macros.c
          Changed report() from 'Illegal' to 'Invalid'
        - parse.c
          ^R allows > 3 characters
        - rept_irpc.c
          Changed report() from 'Illegal' to 'Invalid' ... 'expected'
        - symbols.c
          New parameter to add_sym(... , *stream);
          New parameter to check_sym_invariants(... , *stream);
          New checks: permanent symbol redefinition/phase error
          New report: 'Bad symbol redefinition'
        - symbols.h
          New parameter to add_sym(... , *stream);

17-Jan-2023: Mike Hill
        Bug fixes
        - extree.c
          evaluate_rec(,EVALUATE_DEFINEDNESS) guarantees new_ex_lit(non-zero)
          This now solves the real issue of '.IF DF A ! B' not firing when A=0
        - assemble.c
          Correctly parse multiple labels on one line (e.g. 'A: B: C: NOP')

16-Jan-2023: Mike Hill
        Enhancements
        - assemble.c
          Added an option to have STRICT_IF_DF_NDF (without EVALUATE_DEFINEDNESS)
          This parses the line directly without creating a dummy tree etc.
          There is a further option to define STRICT_IF_DF_NDF_RECURSES ...
          ... which enables the use of < ... > within a .IF/.IIF DF/NDF
          This is to solve the issue of '.IF DF A ! B' not firing even if A is defined
          See 19-Feb-2023 above!

09-Jan-2023: Mike Hill
        Enhancements
        - assemble.c:
          '.EOT' is now ignored (same as MACRO-11 V05.05)
          '.MDELETE' now throws an error if no arguments
          Added a place-holder for 'P_PACKED:' (see 0.9wip above)
          Added some 'TODO:' comments for future reference
          Local symbols may not be set global (using '::') (at reassemble:)
            Setting is ignored - symbol remains local
          Local symbols may not be the LHS of an '=' assignment (at reassemble:)
            Local symbol is assigned anyway - error message only
        Changed generated local symbol range from 32768$ to 30000$
        - assemble_globals.h
          Added #define START_LOCSYM to 30000 and MAX_LOCSYM to 65535
        - assemble_globals.c
          Changed initializer for last_locsym from 32768 to zero
        - macro11.c
          Use START_LOCSYM-1 instead of 32767
        - macros.c
          Use START_LOCSYM instead of 32768
        - parse.c
          Reject local symbols > MAX_LOCSYM
          Note that V05.05 simply wrapped the value (65537$ == 1$)

07-Jan-2023: Mike Hill
        Updates
        - macro11.h:
          #define BASE_VERSION "0.8.1" [ change to "0.9" when we're done ]
          #define VERSIONSTR changes
        - macro11.c:
          Added 'modified' string to print_version()

06-Jan-2023: Mike Hill
        Enhancements
        - assemble.c:
          '.PAGE' now checks there are no arguments

05-Jan-2023: Mike Hill
        Enhancements
        - assemble.c:
          '.BLKW' now throws an error on a byte boundary and forces .EVEN
	  '.PRINT' and '.ERROR' both now list the value (if provided)
          '.END' now shows the transfer address (if any) in the listing
            .PRINT/.ERROR/.END need more work to list the same value as SYM=x should
        Bug fixes
        - macro11.c:
          Changed error messages for '-ysl'
        - symbols.c:
          Changed '.MDELE' to '.MDELETE' (else mismatch if -ysl > 6)
          Changed '.NOCRO' to '.NOCROSS' (else mismatch if -ysl > 6)
        - assemble.c:
          '.END' now terminates processing of all input streams
        - parse.c
          Local-symbol length increased to SYMMAX_MAX (e.g. for 0000$10)

05-Jan-2023: Mike Hill
        Created a 'WIN32 BASELINE' dumpobj.exe & macro11.exe from yesterday's sources
          This is to locally test against Rhialto's original 0.8 from 07-Jul-2022
        Compile with /W4 (warning level 4) with _CRT_SECURE_NO_WARNINGS
          In order to get the maximum error checking possible for future edits
        - util.c:
          Use the 'comma' operator to avoid 'assignment within conditional expression'
          Typecast to avoid 'conversion ... possible loss of data' warnings
        - assemble.c:
          Typecast to avoid 'conversion ... possible loss of data' warnings
          Remove unreachable 'return 1' after 'for(;;)'
        - macros.c:
          Move assignment to avoid 'assignment within conditional expression'
          Unpack complex 'if' to avoid 'assignment within conditional expression'
          Avoid 'non-constant aggregate initializer' for 'macstack'
        - mlb2.c:
          Use the 'comma' operator to avoid 'assignment within conditional expression'
        - mlb-rsx.c:
          Assign NULL to 'ent2' to avoid 'potentially uninitialized local variable'
          Typecast to avoid 'conversion ... possible loss of data' warnings
        - mlb-rt11.c:
          Assign NULL to 'ent2' to avoid 'potentially uninitialized local variable'
          Changed 'char' to 'int' for 'c = fgetc()'
          Typecast to avoid 'conversion ... possible loss of data' warning
        - object.c:
          Typecast to avoid 'conversion ... possible loss of data' warnings
        - parse.c:
          Move assignments to avoid 'assignment within conditional expression'
          Comment out 'if (1)' to avoid 'conditional expression is constant'
          Typecast to avoid 'conversion ... possible loss of data' warning
        - stream2.c:
          Typecast to avoid 'conversion ... possible loss of data' warning

04-Jan-2023: Mike Hill
        Restored portability with C/C++ from Microsoft Visual Studio 9.0
          Microsoft (R) 32-bit C/C++ Version 15.00.30729.01 for 80x86
          Microsoft (R) Incremental Linker Version 9.00.30729.01
          Compile with /W3 (warning level 3) with _CRT_SECURE_NO_WARNINGS
        - dumpobj.c:
          For WIN32, use stricmp() instead of strcasecmp()
          Comment out memcheck() because it is duplicated from util.h
          Put a {} block around embedded type statement
            These are marked with /**/ in all source modules
            Indentation has NOT been changed
        - util.c:
          For WIN32, use a local copy of [my_]strtok_r()
          Put a {} block around embedded type statements (see above)
        - git-info.h:
          Created dummy file because macro11.h #includes it
        - macro11.c:
          For WIN32, use stricmp() instead of strcasecmp()
          Move type statement outside for() statement
          Put a {} block around embedded type statement
        - assemble.c:
          Move type statement outside for() statements
          Put a {} block around embedded type statements
        - macros.c:
          If WIN32, use a local copy of [my_]stpncpy()
        - parse.c
          Put a {} block around embedded type statements
          Change statement order to avoid embedded type statements
          Move type statement outside for() statement
        - mlb-rt11.c:
          Commented out mlb_rt11_vtbl structure names
          Put a {} block around embedded type statement
        - mlb-rsx.c:
          Commented out mlb_rsx_vtbl structure names
          Put a {} block around embedded type statements
        - symbols.c:
          Moved type definition to avoid embedded type statement
          Put a {} block around embedded type statements

----------- Rhialto's entries ------------------

??.??.202?: Rhialto [GitLab version from 17.08.2022]
        version 0.9wip:
        - Fix ^R to ignore RAD50 characters after the first three.(Paul Koning)
        - Add .packed directive.
        - Better check for bad symbol redefinitions.

07.07.2022: Rhialto
        version 0.8:
        - Improve parsing of symbols, e.g. `4..` is not a symbol.
        - More careful file format checking of .MLB files, so that you can
          use either RSX or RT format .MLB files, and autodetection works.
        - Replace the floating point parser by a version which is based on
          integer math only, because the Apple M1 doesn't have the required
          long double support in its compiler.
        13 changes from Paul Koning that add some features which help to
        assemble RSTS/E sources:
        - Add default extensions to .include, .library
        - Fix .psect without argument, add (ignored) pseudo ops .mdelete,
          .cross, .nocross
        - Allow TRAP without argument, or with non-literal argument
        - Fix .library pseudo
        - Always list lines that have an error
        - Fix macro calls with omitted argument that has a default value,
          followed by additional (not omitted) arguments.
        - Implement .ENABLE MCL
        - Treat unexpected .IF argument as true, not false.  This appears to
          be what the reference assembler does, at least it is necessary for
          certain RSTS source files to assemble without error.
        - Allow formal name of .IRP and .IRPC to be enclosed in < >.
        - Just like .RAD50, .IDENT accepts an argument that can contain not
          just delimited string characters but also values in < >.
        - Allow expression (with constant value) in .RADIX
        - Bugfixes in macro expansion, incl duplicate named arguments
        - Fix references to blank section: Its name is empty, not ". BLK."

05.01.2022: Rhialto
        version 0.7.2:
        - Improved error messages for bad addressing modes
          (due to gitlab issue #10)
        - Undefined symbols are now listed in the symbol table.
        - The weird way the unary "operator" % works in expressions is
          now implemented.
          The docs on page 3-8/9 aren't very precise but testing showed
          that any expression with a register in it can be used as a
          register, and (if used to define a symbol) is listed in the
          symbol table as such. %3+1 is <%3>+1 is R4.
        - Fixed registers being used in .word or immediate operands:
          no longer generated as being relocatable expressions.
        - 'make tests' works more portably.

16.05.2021: Rhialto
        version 0.7.1:
        - Fixed immediate source operand of LDEXP, LD[IL][FD]
          which is an integer, unlike several other FPP instructions.
          (gitlab issue #7)
        - Start each pass with .DSABL LSB (gitlab issue #8)

19.03.2021: Rhialto
        version 0.7:
        - Fixed the end-of-line check for MARK, EMT, TRAP.
        - Left/right shift operator _; disabled when the -yus option is used.
          Contributed by Stephen Casner.
        - Added some missing instructions: LDCFD, CSM, TSTSET, WRTLCK.

13.02.2021: Rhialto
        version 0.6:
        - Fixed rounding issues with floating point literals.
        - Fixed FPP instructions which take fp immediate operands.
        - Fixed bounds check on FPP AC0-3 operands.
        - Fix listing to show a % before values that represent a register
          number.
        - Added checks for junk text following correct code. This revealed
          some small other issues, now fixed.
        - Added CIS instructions; as an extension, for the Inline variants
          you can specify the descriptor addresses etc as arguments to
          the instruction (much like an implied .word).

25.04.2020: Rhialto
        version 0.5:
        - Fixed bug with checking addressing mode for JSR and bugs
          with .REPT 0, unneeded relocation on pc-relative mode.
        - Very simple .LIST and .NLIST implementation.
        - Add ^pl and ^ph expressions from 2.11BSD's m11.
        - Object-ified macro libraries with an eye to support the .sml
          files from 2.11BSD's m11. But since the given file does not 
          just contain .MACROs (it even contains conditionals) I'm not
          sure how it is supposed to work.
        - Added 2.11BSD/m11 as test files. To make this reasonable, a
          few small features they use have been recognized and ignored.
        - Add -rsx and -rt11 to switch object file format (from Kevin Handy)
        - Add obj2bin from https://github.com/AK6DN/obj2bin.git

09.11.2015: Rhialto
        version 0.4:
        - Fixed various bugs. The most notable was extensive use-
          after-free in the expression tree, which crashed on NetBSD but
          apparently not on other  systems.
        - Lots of changes to make this MACRO11 more like the MACRO11 of
          RSX-11M+ 4.6. I used Kermit-11 source files for comparison.
          "The Manual" I'm refering to is
          AA-KX10A-TC_PDP-11_MACRO-11_Reference_Manual_May88.pdf at
          www.bitsavers.org/pdf/dec/pdp11/rsx11/RSX11Mplus_V4.x/4a/ and
          I use an installed system to double-check.

----------- Joerg Hoppe's entries ------------------

19.4.2009: JH
        version 0.3
        - bugfix: Illegal labels and illegal opcodes are processed as
          "implied .WORD" directives.
          Expression errors in "do_word()" did not process any input character,
          so parser did go into an endless loop.
        - Switchable syntax extensions with -yxx options:
          symbol len can be adjusted with "-ysl" command line option.
          "-yus" option allows underscore "_" char in symbols.
          This was needed to process code generated by my favorite disassembler.
        - command line help added (-h option)

17.4.2009: JH
        version 0.3
        - ".INCLUDE" re-enabled
        - refactoring: big 6000+ lines "macro11.c" split into 10 modules.

15.4.2009: JH
        Begin rework by Joerg Hoppe (j_hoppe@t-online.de)
        All my changes are marked with "/*JH: .. */" comments

----------- Richard Krebiehl's entries ------------------

15-July-2001
        version 0.2
        removed references to snprintf from dumpobj.c and
        mlb.c for portability
        fixed a type cast warning in dumpobj.c compare_gsdlines
        Removed strcasecmp from macro11.c for portability
        Removed references to wnewmem.c from makefile (isn't needed)
        makefile more compatible with non-gnu make and compiler
        main prints version 0.2

14-July-2001
        First release, version 0.1.
